// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Expense {
  id           String   @id @default(uuid())
  title        String
  description  String?
  amount       Float
  currencyCode String
  attachment   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  logs        ExpenseLog[]

  @@unique([id, userId])
}

model Invoice {
  id           String   @id @default(uuid())
  title        String
  description  String?
  amount       Float
  currencyCode String
  attachment   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  logs        InvoiceLog[]

  @@unique([id, userId])
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expenses  Expense[]
  invoices  Invoice[]
  expenseLogs ExpenseLog[]
  invoiceLogs InvoiceLog[]
}

model ExpenseLog {
  id           String   @id @default(uuid())
  title        String
  description  String?
  amount       Float
  currencyCode String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  expense      Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  expenseId    String

  @@unique([id, userId])
}

model InvoiceLog {
  id           String   @id @default(uuid())
  title        String
  description  String?
  amount       Float
  currencyCode String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  invoice      Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId    String

  @@unique([id, userId])
}